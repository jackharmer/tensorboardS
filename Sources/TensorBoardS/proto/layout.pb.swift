// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/layout.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2017 The TensorFlow Authors. All Rights Reserved.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//==============================================================================

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// Encapsulates information on a single chart. Many charts appear in a category.
struct TensorBoardS_Chart {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The title shown atop this chart. Optional. Defaults to 'untitled'.
  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  /// The content of the chart. This depends on the type of the chart.
  var content: OneOf_Content? {
    get {return _storage._content}
    set {_uniqueStorage()._content = newValue}
  }

  var multiline: TensorBoardS_MultilineChartContent {
    get {
      if case .multiline(let v)? = _storage._content {return v}
      return TensorBoardS_MultilineChartContent()
    }
    set {_uniqueStorage()._content = .multiline(newValue)}
  }

  var margin: TensorBoardS_MarginChartContent {
    get {
      if case .margin(let v)? = _storage._content {return v}
      return TensorBoardS_MarginChartContent()
    }
    set {_uniqueStorage()._content = .margin(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The content of the chart. This depends on the type of the chart.
  enum OneOf_Content: Equatable {
    case multiline(TensorBoardS_MultilineChartContent)
    case margin(TensorBoardS_MarginChartContent)

  #if !swift(>=4.1)
    static func ==(lhs: TensorBoardS_Chart.OneOf_Content, rhs: TensorBoardS_Chart.OneOf_Content) -> Bool {
      switch (lhs, rhs) {
      case (.multiline(let l), .multiline(let r)): return l == r
      case (.margin(let l), .margin(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///*
/// Encapsulates information on a single line chart. This line chart may have
/// lines associated with several tags.
struct TensorBoardS_MultilineChartContent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A list of regular expressions for tags that should appear in this chart.
  /// Tags are matched from beginning to end. Each regex captures a set of tags.
  var tag: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///*
/// Encapsulates information on a single margin chart. A margin chart uses fill
/// area to visualize lower and upper bounds that surround a value.
struct TensorBoardS_MarginChartContent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A list of data series to include within this margin chart.
  var series: [TensorBoardS_MarginChartContent.Series] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  ///*
  /// Encapsulates a tag of data for the chart.
  struct Series {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The exact tag string associated with the scalar summaries making up the
    /// main value between the bounds.
    var value: String = String()

    /// The exact tag string associated with the scalar summaries making up the
    /// lower bound.
    var lower: String = String()

    /// The exact tag string associated with the scalar summaries making up the
    /// upper bound.
    var upper: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

///*
/// A category contains a group of charts. Each category maps to a collapsible
/// within the dashboard.
struct TensorBoardS_Category {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// This string appears atop each grouping of charts within the dashboard.
  var title: String = String()

  /// Encapsulates data on charts to be shown in the category.
  var chart: [TensorBoardS_Chart] = []

  /// Whether this category should be initially closed. False by default.
  var closed: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///*
/// A layout encapsulates how charts are laid out within the custom scalars
/// dashboard.
struct TensorBoardS_Layout {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Version `0` is the only supported version.
  var version: Int32 = 0

  /// The categories here are rendered from top to bottom.
  var category: [TensorBoardS_Category] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TensorBoardS"

extension TensorBoardS_Chart: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Chart"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "multiline"),
    3: .same(proto: "margin"),
  ]

  fileprivate class _StorageClass {
    var _title: String = String()
    var _content: TensorBoardS_Chart.OneOf_Content?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _title = source._title
      _content = source._content
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._title)
        case 2:
          var v: TensorBoardS_MultilineChartContent?
          if let current = _storage._content {
            try decoder.handleConflictingOneOf()
            if case .multiline(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._content = .multiline(v)}
        case 3:
          var v: TensorBoardS_MarginChartContent?
          if let current = _storage._content {
            try decoder.handleConflictingOneOf()
            if case .margin(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._content = .margin(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 1)
      }
      switch _storage._content {
      case .multiline(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .margin(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TensorBoardS_Chart, rhs: TensorBoardS_Chart) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._title != rhs_storage._title {return false}
        if _storage._content != rhs_storage._content {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TensorBoardS_MultilineChartContent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MultilineChartContent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.tag)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tag.isEmpty {
      try visitor.visitRepeatedStringField(value: self.tag, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TensorBoardS_MultilineChartContent, rhs: TensorBoardS_MultilineChartContent) -> Bool {
    if lhs.tag != rhs.tag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TensorBoardS_MarginChartContent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MarginChartContent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "series"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.series)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.series.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.series, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TensorBoardS_MarginChartContent, rhs: TensorBoardS_MarginChartContent) -> Bool {
    if lhs.series != rhs.series {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TensorBoardS_MarginChartContent.Series: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TensorBoardS_MarginChartContent.protoMessageName + ".Series"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "lower"),
    3: .same(proto: "upper"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.value)
      case 2: try decoder.decodeSingularStringField(value: &self.lower)
      case 3: try decoder.decodeSingularStringField(value: &self.upper)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    if !self.lower.isEmpty {
      try visitor.visitSingularStringField(value: self.lower, fieldNumber: 2)
    }
    if !self.upper.isEmpty {
      try visitor.visitSingularStringField(value: self.upper, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TensorBoardS_MarginChartContent.Series, rhs: TensorBoardS_MarginChartContent.Series) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.lower != rhs.lower {return false}
    if lhs.upper != rhs.upper {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TensorBoardS_Category: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Category"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "chart"),
    3: .same(proto: "closed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.title)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.chart)
      case 3: try decoder.decodeSingularBoolField(value: &self.closed)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.chart.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.chart, fieldNumber: 2)
    }
    if self.closed != false {
      try visitor.visitSingularBoolField(value: self.closed, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TensorBoardS_Category, rhs: TensorBoardS_Category) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.chart != rhs.chart {return false}
    if lhs.closed != rhs.closed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TensorBoardS_Layout: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Layout"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "category"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.version)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.category)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != 0 {
      try visitor.visitSingularInt32Field(value: self.version, fieldNumber: 1)
    }
    if !self.category.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.category, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TensorBoardS_Layout, rhs: TensorBoardS_Layout) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.category != rhs.category {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
